<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd">
	<context:annotation-config />
	<!-- S Redis 配置 -->
	<!-- scanner redis properties -->
	<context:property-placeholder
		location="classpath:redis.properties" ignore-unresolvable="true" />
	<!--（1）如果你有多个数据源需要通过 <context:property-placeholder管理，且不愿意放在一个配置文件里， 那么一定要加上ignore-unresolvable=“true"(每一个都需要加这个属性) -->
	<!--（2）注意新版的（从3.0版本开始弃用）JedisPoolConfig的property name， 不是maxActive而是maxTotal，而且没有maxWait属性，建议看一下Jedis源码。 -->
	<!-- redis连接池 -->
	<bean id="jedisPoolConfig"
		class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.maxActive}"></property>
		<property name="maxIdle" value="${redis.maxIdle}"></property>
		<property name="maxWaitMillis" value="${redis.maxWait}"></property>
		<property name="testOnBorrow" value="${redis.testOnBorrow}"></property>
		<property name="testOnReturn" value="${redis.testOnReturn}"></property>
		<property name="blockWhenExhausted"
			value="${redis.blockWhenExhausted}"></property>
		<property name="testWhileIdle" value="${redis.testWhileIdle}"></property>
		<property name="timeBetweenEvictionRunsMillis"
			value="${redis.timeBetweenEvictionRunsMillis}"></property>
		<property name="minEvictableIdleTimeMillis"
			value="${redis.minEvictableIdleTimeMillis}"></property>
		<property name="softMinEvictableIdleTimeMillis"
			value="${redis.softMinEvictableIdleTimeMillis}"></property>
	</bean>
	<!-- redis连接工厂 -->
	<bean id="connectionFactory"
		class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory"
		p:host-name="${redis.host}" p:port="${redis.port}"
		p:password="${redis.password}" p:pool-config-ref="jedisPoolConfig"
		p:usePool="true" />
	<!-- redis操作模板，这里采用尽量面向对象的模板 -->
	<!--<bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate"> 
		使用上句会无法使用模糊匹配 -->
	<!-- p:enable-transaction-support="false" 设置setEnableTransactionSupport(true)，当前线程会强制先 
		MULTI命令 -->
	<bean id="redisTemplate"
		class="org.springframework.data.redis.core.StringRedisTemplate"
		p:enable-transaction-support="true">
		<property name="connectionFactory" ref="connectionFactory" />
		<!-- 如果不配置Serializer，那么存储的时候只能使用String，如果用对象类型存储，那么会提示错误 can't cast to 
			String！！！ -->
		<property name="keySerializer">
			<!--对key的默认序列化器。默认值是StringSerializer -->
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<!--是对value的默认序列化器，默认值是取自DefaultSerializer的JdkSerializationRedisSerializer。 -->
		<property name="valueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<!--存储Map时key需要的序列化配置 -->
		<property name="hashKeySerializer">
			<bean
				class="org.springframework.data.redis.serializer.StringRedisSerializer" />
		</property>
		<!--存储Map时value需要的序列化配置 -->
		<property name="hashValueSerializer">
			<bean
				class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
		</property>
		<!--开启事务 系统自动帮我们拿到了事务中绑定的连接。可以在一个方法的多次对Redis增删该查中，始终使用同一个连接。 -->
		<property name="enableTransactionSupport" value="true" />
		<!--在Spring中@Transactional 也是可以进行事物控制的。 -->
	</bean>
	<!-- 缓存管理器: 使用redis 当做缓存 -->
	<!--<bean id="cacheManager" class="org.springframework.data.redis.cache.RedisCacheManager"> -->
	<!--<constructor-arg ref="redisTemplate"/> -->
	<!--</bean> -->
	<!-- cache配置 -->
	<!-- E Redis 配置 -->

</beans>